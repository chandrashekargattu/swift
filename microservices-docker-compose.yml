version: '3.8'

services:
  # Infrastructure Services
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: interstate_cab
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - cab-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  mongodb:
    image: mongo:7.0
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: admin123
      MONGO_INITDB_DATABASE: interstate_cab
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    networks:
      - cab-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7-alpine
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - cab-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    networks:
      - cab-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - cab-network

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - cab-network

  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    networks:
      - cab-network
    depends_on:
      - prometheus

  jaeger:
    image: jaegertracing/all-in-one:latest
    ports:
      - "6831:6831/udp"  # Jaeger agent
      - "16686:16686"    # Jaeger UI
      - "14268:14268"    # Jaeger collector
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - cab-network

  # API Gateway
  kong:
    image: kong:3.5
    environment:
      KONG_DATABASE: 'off'
      KONG_DECLARATIVE_CONFIG: /kong/declarative/kong.yml
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
    ports:
      - "8000:8000"  # Proxy port
      - "8443:8443"  # Proxy SSL port
      - "8001:8001"  # Admin API
      - "8444:8444"  # Admin SSL port
    volumes:
      - ./kong/kong.yml:/kong/declarative/kong.yml
    networks:
      - cab-network
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Microservices
  user-service:
    build: ./microservices/user-service
    environment:
      SERVICE_NAME: user-service
      SERVICE_PORT: 8001
      DATABASE_URL: postgresql+asyncpg://postgres:postgres@postgres:5432/user_db
      REDIS_URL: redis://redis:6379/0
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SECRET_KEY: your-secret-key-here
      JAEGER_AGENT_HOST: jaeger
      JAEGER_AGENT_PORT: 6831
    ports:
      - "8011:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - cab-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  booking-service:
    build: ./microservices/booking-service
    environment:
      SERVICE_NAME: booking-service
      SERVICE_PORT: 8002
      MONGODB_URL: mongodb://admin:admin123@mongodb:27017/booking_db?authSource=admin
      REDIS_URL: redis://redis:6379/1
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      USER_SERVICE_URL: http://user-service:8001
      LOCATION_SERVICE_URL: http://location-service:8003
      JAEGER_AGENT_HOST: jaeger
      JAEGER_AGENT_PORT: 6831
    ports:
      - "8012:8002"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - cab-network

  location-service:
    build: ./microservices/location-service
    environment:
      SERVICE_NAME: location-service
      SERVICE_PORT: 8003
      MONGODB_URL: mongodb://admin:admin123@mongodb:27017/location_db?authSource=admin
      REDIS_URL: redis://redis:6379/2
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      GOOGLE_MAPS_API_KEY: ${GOOGLE_MAPS_API_KEY}
      JAEGER_AGENT_HOST: jaeger
      JAEGER_AGENT_PORT: 6831
    ports:
      - "8013:8003"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cab-network

  driver-service:
    build: ./microservices/driver-service
    environment:
      SERVICE_NAME: driver-service
      SERVICE_PORT: 8004
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/driver_db
      REDIS_URL: redis://redis:6379/3
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      JAEGER_AGENT_HOST: jaeger
      JAEGER_AGENT_PORT: 6831
    ports:
      - "8014:8004"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - cab-network

  payment-service:
    build: ./microservices/payment-service
    environment:
      SERVICE_NAME: payment-service
      SERVICE_PORT: 8005
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/payment_db
      RABBITMQ_URL: amqp://guest:guest@rabbitmq:5672/
      STRIPE_API_KEY: ${STRIPE_API_KEY}
      RAZORPAY_KEY_ID: ${RAZORPAY_KEY_ID}
      RAZORPAY_KEY_SECRET: ${RAZORPAY_KEY_SECRET}
      JAEGER_AGENT_HOST: jaeger
      JAEGER_AGENT_PORT: 6831
    ports:
      - "8015:8005"
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    networks:
      - cab-network

  notification-service:
    build: ./microservices/notification-service
    environment:
      SERVICE_NAME: notification-service
      SERVICE_PORT: 8006
      MONGODB_URL: mongodb://admin:admin123@mongodb:27017/notification_db?authSource=admin
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      SMTP_HOST: ${SMTP_HOST}
      SMTP_PORT: ${SMTP_PORT}
      SMTP_USER: ${SMTP_USER}
      SMTP_PASSWORD: ${SMTP_PASSWORD}
      TWILIO_ACCOUNT_SID: ${TWILIO_ACCOUNT_SID}
      TWILIO_AUTH_TOKEN: ${TWILIO_AUTH_TOKEN}
      FCM_SERVER_KEY: ${FCM_SERVER_KEY}
      JAEGER_AGENT_HOST: jaeger
      JAEGER_AGENT_PORT: 6831
    ports:
      - "8016:8006"
    depends_on:
      mongodb:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - cab-network

  ai-service:
    build: ./microservices/ai-service
    environment:
      SERVICE_NAME: ai-service
      SERVICE_PORT: 8007
      MONGODB_URL: mongodb://admin:admin123@mongodb:27017/ai_db?authSource=admin
      REDIS_URL: redis://redis:6379/4
      CHROMADB_HOST: chromadb
      CHROMADB_PORT: 8000
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      JAEGER_AGENT_HOST: jaeger
      JAEGER_AGENT_PORT: 6831
    ports:
      - "8017:8007"
    depends_on:
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
      chromadb:
        condition: service_healthy
    networks:
      - cab-network

  analytics-service:
    build: ./microservices/analytics-service
    environment:
      SERVICE_NAME: analytics-service
      SERVICE_PORT: 8008
      CLICKHOUSE_URL: http://clickhouse:8123
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      REDIS_URL: redis://redis:6379/5
      JAEGER_AGENT_HOST: jaeger
      JAEGER_AGENT_PORT: 6831
    ports:
      - "8018:8008"
    depends_on:
      clickhouse:
        condition: service_healthy
      kafka:
        condition: service_healthy
    networks:
      - cab-network

  admin-service:
    build: ./microservices/admin-service
    environment:
      SERVICE_NAME: admin-service
      SERVICE_PORT: 8009
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/admin_db
      USER_SERVICE_URL: http://user-service:8001
      BOOKING_SERVICE_URL: http://booking-service:8002
      JAEGER_AGENT_HOST: jaeger
      JAEGER_AGENT_PORT: 6831
    ports:
      - "8019:8009"
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - cab-network

  # Additional Infrastructure
  rabbitmq:
    image: rabbitmq:3-management-alpine
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: admin
      RABBITMQ_DEFAULT_PASS: admin
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - cab-network
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  chromadb:
    image: chromadb/chroma:latest
    ports:
      - "8020:8000"
    volumes:
      - chromadb_data:/chroma/chroma
    networks:
      - cab-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/heartbeat"]
      interval: 10s
      timeout: 5s
      retries: 5

  clickhouse:
    image: clickhouse/clickhouse-server:latest
    ports:
      - "8123:8123"
      - "9000:9000"
    volumes:
      - clickhouse_data:/var/lib/clickhouse
    environment:
      CLICKHOUSE_USER: default
      CLICKHOUSE_PASSWORD: clickhouse
    networks:
      - cab-network
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8123/ping"]
      interval: 10s
      timeout: 5s
      retries: 5

networks:
  cab-network:
    driver: bridge

volumes:
  postgres_data:
  mongo_data:
  redis_data:
  prometheus_data:
  grafana_data:
  rabbitmq_data:
  chromadb_data:
  clickhouse_data:
